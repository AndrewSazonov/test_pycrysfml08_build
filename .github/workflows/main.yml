name: main

on:
  push:
  schedule:
    - cron: '*/60 8-18 * * *'  # every 1 hour from 8:00 to 18:00 every day

env:
  PROJECTS_DIR: $GITHUB_WORKSPACE
  CRYSFML_PROJECT: CrysFML2008
  PYCRYSFML_PROJECT: PyCrysFML08
  CRYSFML_INSTALL_DIR: $PROJECTS_DIR/${CRYSFML_PROJECT}_install
  PYCRYSFML_INSTALL_DIR: $PROJECTS_DIR/${PYCRYSFML_PROJECT}_install

jobs:
  main:
    timeout-minutes: 30

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-12]  # [ubuntu-22.04, macos-12, windows-2022]
        build_system: [cmake]  # [cmake, fpm]
        compiler: [gfortran]  # [gfortran, ifx]
        include:
          - os: macos-12
            build_system: fpm
            compiler: gfortran
          - os: ubuntu-22.04
            build_system: fpm
            compiler: ifx
          - os: ubuntu-22.04
            build_system: cmake
            compiler: ifx

    steps:
      - name: Check-out repository
        uses: actions/checkout@v3

      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
            python-version: 3.11

      - name: Upgrade PIP
        run: python -m pip install --upgrade pip

      - name: Declare env variables
        shell: bash
        run: |
          echo "PROJECTS_DIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "CRYSFML_PROJECT=CrysFML2008" >> $GITHUB_ENV
          echo "PYCRYSFML_PROJECT=PyCrysFML08" >> $GITHUB_ENV
          echo "CRYSFML_INSTALL_DIR=${{ env.PROJECTS_DIR }}/${{ env.CRYSFML_PROJECT }}_install" >> $GITHUB_ENV
          echo "PYCRYSFML_INSTALL_DIR=${{ env.PROJECTS_DIR }}/${{ env.PYCRYSFML_PROJECT }}_install" >> $GITHUB_ENV
          if [[ '${{ runner.os }}' == 'macOS' ]]; then
            echo "LIBPYTHON=-L/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/config-3.11-darwin -lpython3.11" >> $GITHUB_ENV
            echo "MACOSX_DEPLOYMENT_TARGET=$(sw_vers -productVersion)" >> $GITHUB_ENV  # needed because of `brew reinstall gcc`
          fi
          if [[ '${{ runner.os }}' == 'Linux' && '${{ matrix.compiler }}' == 'ifx' ]]; then
            echo "COMPILER_OPTIONS=-fpp -fPIC" >> $GITHUB_ENV
          elif [[ '${{ matrix.compiler }}' == 'gfortran' ]]; then
            echo "COMPILER_OPTIONS=-cpp -std=f2008 -ffree-line-length-none -fPIC" >> $GITHUB_ENV
          fi

      - name: Install Python dependences
        run: python -m pip install numpy pytest deepdiff fpm

      - name: Install OS-specific dependences (macOS)
        if: runner.os == 'macOS' && matrix.compiler == 'gfortran'
        run: |
          brew reinstall gcc  # to add gfortran
          gfortran --version
          brew tap fortran-lang/homebrew-fortran
          # brew install fpm
          # fpm --version
          # brew install llvm libomp  # OpenMP for parallel compilation in FPM

      - name: Install OS-specific dependences (Linux + FPM)
        if: runner.os == 'Linux' && matrix.build_system == 'fpm'
        run: |
          # sudo apt-get install ruby ruby-dev rubygems build-essential  # needed for FPM
          # sudo gem install fpm  # FPM
          fpm --version

      - name: Install OS-specific dependences (Linux + ifx)
        if: runner.os == 'Linux' && matrix.compiler == 'ifx'
        run: |
          curl -Lo- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | sudo gpg --dearmor -o /usr/share/keyrings/oneapi-archive-keyring.gpg
          sudo tee /etc/apt/sources.list.d/oneAPI.list <<< "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main"
          sudo apt-get update
          sudo apt-get install intel-oneapi-compiler-fortran
          source /opt/intel/oneapi/setvars.sh
          printenv >> $GITHUB_ENV
          ifx --version

      #- name: Install OS-specific dependences (Linux + ifx)
      #  if: runner.os == 'Linux' && matrix.compiler == 'ifx'
      #  run: |
      #    wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
      #    sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
      #    rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
      #    echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
      #    sudo apt-get update
      #    sudo apt-get install intel-oneapi-compiler-fortran
      #    source /opt/intel/oneapi/setvars.sh
      #    printenv >> $GITHUB_ENV
      #    ifx --version

      - name: Download CrysFML (fpm_macos branch)
        run: git clone --single-branch --branch fpm_macos https://code.ill.fr/rodriguez-carvajal/${{ env.CRYSFML_PROJECT }}.git

      - name: Build CrysFML using CMake
        if: matrix.build_system == 'cmake'
        run: |
          cd ${{ env.PROJECTS_DIR }}/${{ env.CRYSFML_PROJECT }}
          mkdir build
          cd build
          cmake -D ARCH32=OFF -D PYTHON_API=OFF -D CMAKE_BUILD_TYPE=Debug -D CMAKE_Fortran_COMPILER=${{ matrix.compiler }} -D CMAKE_INSTALL_PREFIX=${{ env.CRYSFML_INSTALL_DIR }} ..
          cmake --build . --parallel
          cmake --install .

      - name: Build CrysFML using FPM
        if: matrix.build_system == 'fpm'
        run: |
          cd ${{ env.PROJECTS_DIR }}/${{ env.CRYSFML_PROJECT }}
          ./make_CrysFML_fpm.sh ${{ matrix.compiler }}
          mv ${{ matrix.compiler }}_release ${{ env.CRYSFML_INSTALL_DIR }}

      - name: Download PyCrysFML (develop branch)
        run: git clone --single-branch --branch develop https://code.ill.fr/scientific-software/${{ env.PYCRYSFML_PROJECT }}.git

      - name: Build PyCrysFML modules one by one
        run: |
          cd ${{ env.PROJECTS_DIR }}/${{ env.PYCRYSFML_PROJECT }}/src
          mkdir -p ${{ env.PYCRYSFML_INSTALL_DIR }}/pycrysfml08
          for name in py_cfml_metrics py_cfml_profiles py_cfml_sxtal_geom; do
            echo '--- 1'
            ${{ matrix.compiler }} ${{ env.COMPILER_OPTIONS }} -c $name.f90 -I ${{ env.CRYSFML_INSTALL_DIR }}/include
            echo '--- 2'
            ${{ matrix.compiler }} -shared -o $name.so $name.o -L ${{ env.CRYSFML_INSTALL_DIR }}/lib -l CrysFML08 ${{ env.LIBPYTHON }}
            echo '--- 3'
            mv $name.so ${{ env.PYCRYSFML_INSTALL_DIR }}/pycrysfml08
            echo '--- 4'
            ls -l
            echo '--- 5'
            ls -l ${{ env.PYCRYSFML_INSTALL_DIR }}/pycrysfml08
          done
          rm *.o *.*mod

      - name: Run tests
        run: pytest tests/ -vv
